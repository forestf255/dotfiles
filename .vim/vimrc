" Reload vim after saving it
augroup VimReload
  autocmd!
  autocmd BufWritePost  $VIMRC_PATH  source $VIMRC_PATH
augroup END

" Don't try to be vi compatible
set nocompatible

" Turn on syntax highlighting
syntax on

" For plugins to load correctly
filetype plugin indent on

let mapleader = ";"

" Better command line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Show relative line numbers
set number
set relativenumber

" Toggle relative line numbers
nnoremap <leader>n :call RelativeNumToggle()<cr>
function! RelativeNumToggle()
  if &relativenumber
    set norelativenumber
  else
    set relativenumber
  endif
endfunction

" Blink cursor on error instead of beeping
set visualbell

" Encoding
set encoding=utf-8

" Whitespace
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

" Filetype specific small changes here
autocmd Filetype python set tabstop=4 shiftwidth=4 softtabstop=4
autocmd Filetype c set textwidth=99
autocmd Filetype cpp set textwidth=99

" Toggle line marker
nnoremap <leader>m :call MarkColumnToggle()<cr>
function! MarkColumnToggle()
  if &colorcolumn
    set colorcolumn=
  else
    set colorcolumn=80
  endif
endfunction

" Cursor motion
set scrolloff=3
set backspace=indent,eol,start

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Status bar
set laststatus=2

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase
map <leader><space> :nohl<CR>

" Visualize tabs and newlines
set listchars=tab:▸\ ,eol:¬
"Use your leader key + l to toggle on/off
map <leader>l :set list!<CR> " Toggle tabs and EOL

" Highlight trailing white space
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Native shortcuts
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

:imap jk <Esc>

" Plugins
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $VIMRC_PATH
else
  " Light / Dark Mode
  :command Dark set background=dark
  :command Light set background=light
endif

call plug#begin('~/.vim/plugged')
Plug 'jlanzarotta/bufexplorer'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-commentary'
Plug 'ruanyl/vim-gh-line'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-surround'
Plug 'ojroques/vim-oscyank',
Plug 'sainnhe/gruvbox-material'
Plug 'sheerun/vim-polyglot'
Plug 'svermeulen/vim-cutlass'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-autoformat/vim-autoformat'
Plug 'ruanyl/vim-gh-line'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'jesseleite/vim-agriculture'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'wellle/context.vim'
call plug#end()

" Set the terminal colors. Must be done after plug#end()
if has('termguicolors')
  set termguicolors
endif
set background=dark
let g:gruvbox_material_disable_italic_comment = 1
let g:gruvbox_material_background = 'soft'
let g:airline_theme = 'gruvbox_material'
colorscheme gruvbox-material

let g:airline_extensions = []
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'

" Use // for C/C++ comments
autocmd FileType cpp set commentstring=//\ %s
autocmd FileType c set commentstring=//\ %s

xnoremap f :Autoformat<CR>
noremap f :Autoformat<CR>

let g:formatter_python_style = 'black'
let g:formatdef_custom_clang = '"clang-format --fallback-style=google"'
let g:formatdef_buildifier = '"buildifier"'
let g:formatters_cpp = ['custom_clang']
let g:formatters_c = ['custom_clang']

" Autoforward yank events.
autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '' | execute 'OSCYankRegister "' | endif
let g:oscyank_silent = v:true
let g:oscyank_term = 'default'

" vim-cutlass
nnoremap m d
xnoremap m d
nnoremap mm dd
nnoremap M D

" coc.nvim
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
let g:coc_disable_startup_warning = 1
let g:coc_disable_transparent_cursor = 1

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#confirm() :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nnoremap <leader>o :BufExplorer<cr>
" Fzf search files from root dir.
nnoremap <leader>f :Files<cr>
" Fzf search history.
nnoremap <leader>h :History<cr>
" Fzf search text from the root dir.
nnoremap <C-g> :RgRaw<space>""<left>
" Fzf search text from the current file's directory.
nnoremap <C-f> :let $VIM_DIR=expand('%:p:h')<CR>:RgRaw<space>""<space>$VIM_DIR<S-left><left><left>
" Fzf search the last search pattern from the root dir.
nnoremap <C-s> :call SearchInProject()<cr>
function! SearchInProject()
  let search = substitute(@/, '["\\<", "\\>]', '', 'g')
  execute "RgRaw " . search
endfunction

" Use rg for grep searches
if executable('rg')
  set grepprg=rg\ --color=never
endif

" Opens a shell in the current files directory
nnoremap <C-x> :let $VIM_DIR=expand('%:p:h')<cr>:tab :term ++close bash<cr>cd $VIM_DIR<cr>
" For the following functions:
" @/ = last search pattern
" . is used to join strings
" Replace in the current file on the last searched string
nmap <expr>  <leader>rf ':%s/' . @/ . '//g<left><left>'
" Replace in the last searched string in the current file's directory
nnoremap <leader>rd :call ReplaceInDirectory(expand('%:p:h'))<cr>
function! ReplaceInDirectory(dir)
  let search = @/
  let dir = a:dir . "/*"
  execute "vimgrep /" . search . "/gj " . dir "/* | copen "
  call ReplaceInQuickFixList(search)
endfunction
" Replace in the project on the last searched string
" 1) <ctrl-s>: Opens FZF with the last search pattern.
" 2) ctrl-s + enter: Saves the fzf list to the QuickFix list
" 3) <leader>rq: Starts a replace on the QuickFix list
let $FZF_DEFAULT_OPTS = '--bind ctrl-s:select-all'
" Replace in QuickFix list.
nnoremap <leader>rq :call ReplaceInQuickFixList(@/)<cr>
function! ReplaceInQuickFixList(search)
  let search = substitute(a:search, '["\\<", "\\>]', '', 'g')
  try
    let replace = input('Enter replacement pattern: ')
    execute "cfdo %s/" . search . "/" . replace . "/gc | update"
  finally
    cclose
  endtry
endfunction

" Ignore these from rg search
set wildignore+=*/.git/*,*/tmp/*,*.swp
" Always color rg output
set grepprg=grep\ --color=always\ -n\ $*\ /dev/null

" Copy github link with <leader>gh
let g:gh_open_command = 'fn() { echo "$@" | xsel -ib; }; fn '
let g:gh_trace = 1

" Create doxygen comment
map <leader>c :Dox<cr>

let g:peekaboo_window = '30new'
